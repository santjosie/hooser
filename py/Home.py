import streamlit as st
import replicate
from transformers import AutoTokenizer
import os
from pages.utils import template as t
from pages.utils import atlassian as atlas
import pyperclip
from replicate.client import Client


def user_api_token():
    with st.expander("Replicate configuration"):
        replicate_api_token = st.text_input('Enter your Replicate API token:', type='password')
        if not (replicate_api_token.startswith('r8_') and len(replicate_api_token) == 40):
            st.warning('Please enter your Replicate API token.', icon='âš ')
        return replicate_api_token

def replicate_token():
    try:
        if 'REPLICATE_API_TOKEN' in st.secrets:
            replicate_api_token = st.secrets['REPLICATE_API_TOKEN']
        else:
            replicate_api_token = user_api_token()
    except FileNotFoundError as e:
        replicate_api_token = user_api_token()
    finally:
        os.environ['REPLICATE_API_TOKEN'] = replicate_api_token

def hooser_config():
    st.subheader('Pick a template')
    template = st.selectbox(label='Pick one',
                            options=t.list_templates(),
                            index=0,
                            help="Templates are pre-defined writing styles for user stories. Pick the style that you want the user story to be written in",
                            label_visibility="collapsed")
    st.session_state['template_instructions'] = t.set_template_instrutions(template)
    st.session_state['temperature'] = 0.3  # st.sidebar.slider('Temperature', min_value=0.01, max_value=5.0, value=0.3, step=0.1)
    st.session_state['top_p'] = 0.9  # st.sidebar.slider('Top P', min_value=0.01, max_value=1.0, value=0.9, step=0.01)


def sidebar():
    with st.sidebar:
        hooser_config()
        replicate_token()
        atlas.configure_atlassian()


def main_header():
    st.title('Welcome to Hooser!')
    st.caption('Let Hooser write the user stories for the features that you want to build.')
    st.caption('So you get more time for yoga and travel.')


@st.cache_resource(show_spinner=False)
def get_tokenizer():
    return AutoTokenizer.from_pretrained('huggyllama/llama-7b')


def get_num_tokens():
    return len(get_tokenizer()(st.session_state['prompt']))


def generate_arctic_response():
    if get_num_tokens() >= 3072:
        st.error(
            'Length of the prompt is too long. Please shorten it.'
            'Cannot process if the number of tokens generated by the prompt is greater than or equal to 3072')
        st.stop()

    prompt = st.session_state['template_instructions'] + '\n' + st.session_state['prompt']
    replicate = Client(api_token=os.environ['REPLICATE_API_TOKEN'])
    for event in replicate.stream('snowflake/snowflake-arctic-instruct',
                                     input={'top_p': st.session_state['top_p'],
                                            'prompt': prompt,
                                            'temperature': st.session_state['temperature']
                                            }):
        yield str(event)


def extract_user_story():
    if 'user_story' in st.session_state:
        col_spacer, col_copy, col_push = st.columns([0.5, 0.3, 0.2])
        with col_copy:
            copy_to_clipboard = st.button(label="Copy to clipboard :clipboard:")
            if copy_to_clipboard:
                try:
                    pyperclip.copy(st.session_state['user_story'])
                except pyperclip.PyperclipException:
                    st.warning("Copying currently not working for Linux deployments")

        with col_push:
            push_to_jira = st.button(label="Push to Jira :twisted_rightwards_arrows:")
            if push_to_jira:
                atlas.push_to_jira("New user story generated by Hooser", description=st.session_state['user_story'])


def input_prompt():
    with st.container():
        # this is the input field where the user will enter a prompt to generate the user story
        lc_prompt = st.chat_input(placeholder='Write a (very) brief description of the feature '
                                              'you want to build and let Hooser do the rest')

        if 'user_story' in st.session_state:
            if not(lc_prompt):
                st.write(st.session_state['user_story'])
                extract_user_story()

        if lc_prompt:
            if not(os.environ['REPLICATE_API_TOKEN'].startswith('r8_') and len(os.environ['REPLICATE_API_TOKEN']) == 40):
                st.error("Enter a valid Replicate token to generate the user story")
                st.stop()
            st.session_state['prompt'] = lc_prompt
            lc_response = generate_arctic_response()
            if 'user_story' in st.session_state:
                del st.session_state['user_story']
            st.session_state['user_story'] = st.write_stream(lc_response)
            extract_user_story()

def main():
    st.set_page_config(
        page_title='Hooser | Home',
        page_icon=':material/home:',
        menu_items={
            'Get help': 'https://www.google.com',
            'About': '# Version: 2.2 #'
        })

    sidebar()
    main_header()
    input_prompt()


if __name__ == '__main__':
    main()